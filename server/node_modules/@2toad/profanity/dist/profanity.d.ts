import { ProfanityOptions } from "./profanity-options";
import { List, CensorType } from "./models";
export declare class Profanity {
    options: ProfanityOptions;
    whitelist: List;
    private blacklist;
    private removed;
    private regexes;
    constructor(options?: ProfanityOptions | Partial<ProfanityOptions>);
    exists(text: string, languages?: string[]): boolean;
    censor(text: string, censorType?: CensorType, languages?: string[]): string;
    private replaceProfanity;
    addWords(words: string[]): void;
    removeWords(words: string[]): void;
    /**
     * Determines the list of languages to use, either from the provided list or falling back to default languages.
     * @param languages - An optional list of languages to use.
     * @returns The list of languages to be used.
     */
    private resolveLanguages;
    /**
     * Retrieves or constructs a regular expression for detecting profanity in the specified languages.
     * This method first checks if a regex for the given combination of languages already exists in the cache.
     *
     * @param languages - An array of languages to include in the regex.
     * @throws {Error} If no languages are provided.
     * @returns A RegExp object for detecting profanity in the specified languages.
     */
    private getRegex;
    /**
     * Constructs a regular expression for detecting profane words.
     *
     * @param words - An array of profane words to be included in the regex.
     * @returns A RegExp that matches any of the profane or blacklisted words.
     */
    private buildRegex;
    /**
     * Clear the cached regexes.
     */
    private clearRegexes;
}
export declare const profanity: Profanity;
